Link : https://leetcode.com/problems/n-th-tribonacci-number/description/

Code : 

//Recursion

class Solution {
    public int tribonacci(int n) {
        int dp[]=new int[n+1];
        Arrays.fill(dp,-1);
        return function(n,dp);
    }
    
    public int function(int n,int[] dp){
        if(n==0)
        return 0;
        if(n<=2)
        return 1;

        if(dp[n]!=-1)
            return dp[n];

        return dp[n]=function(n-1,dp) + function(n-2,dp) + function(n-3,dp);
    }
}


//Tabulation

class Solution {
    public int tribonacci(int n) {

        if(n==0)
        return 0;
        if(n<=2)
        return 1;

        int dp[]=new int[n+1];
        return function(n,dp);
    }
    
    public int function(int n,int[] dp){
        dp[0]=0;
        dp[1]=1;
        dp[2]=1;

        for(int i=3;i<=n;i++){
            dp[i]=dp[i-1]+dp[i-2]+dp[i-3];
        }

        return dp[n];
    }
}


//Space Optimization

class Solution {
    public int tribonacci(int n) {

        if(n==0)
        return 0;
        if(n<=2)
        return 1;

        
        return function(n);
    }
    
    public int function(int n){
        
       int prev1=1;
       int prev2=1;
       int prev3=0;
       int curi=0;

        for(int i=3;i<=n;i++){
            curi=prev1+prev2+prev3;

            prev3=prev2;
            prev2=prev1;
            prev1=curi;
        }

        return prev1;
    }
}
